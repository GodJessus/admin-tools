import java.nio.file.Paths

plugins {
	id 'java'
	id 'idea'
	id 'com.github.node-gradle.node' version '3.0.1'
	id 'org.springframework.boot' version '2.5.0-M3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

allprojects {
	apply plugin: 'base'
	apply plugin: 'maven-publish'
	apply plugin: 'com.github.node-gradle.node'
	group = 'com.flux'
	version = '0.0.1-SNAPSHOT'
	sourceCompatibility = '15'
	defaultTasks 'clean', 'install', 'build'
}

group = 'com.flux'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework:spring-jdbc'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'

//	implementation 'com.fasterxml.jackson.core:jackson-databind:2.8.9'
	implementation 'org.json:json:20210307'

	implementation 'org.springframework.session:spring-session-core'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.springframework.session:spring-session-jdbc'

	implementation 'io.pivotal.cfenv:java-cfenv-boot:2.3.0'

	compileOnly 'javax.servlet:javax.servlet-api:4.0.1'

	compileOnly 'org.projectlombok:lombok'
	compile 'io.reactiverse:reactive-pg-client:0.11.4'

	runtimeOnly 'io.r2dbc:r2dbc-postgresql'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

sourceSets {
	main {
		resources  {
			exclude 'front-end/node_modules'
		}
	}
}

clean.doFirst {
	['nodejs', 'npm', 'yarn'].each { delete "$projectDir/.gradle/$it" }
	['out', 'build'].each { delete "$projectDir/$it" }
	delete Paths.get('src', 'main', 'resources', 'public')

	def clear = project.hasProperty('clear') ? 'true' == project.property('clear') : false
	if (clear) delete Paths.get(project.node.nodeModulesDir.path as String, 'node_modules')
}

defaultTasks 'clean', 'build'

assemble.dependsOn processResources, npm_run_build
processResources.shouldRunAfter npm_run_build
npm_run_build.dependsOn npm_install

bootJar {
	launchScript()
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

test {
	useJUnitPlatform()
}
